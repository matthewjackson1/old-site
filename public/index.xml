<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Jackson</title>
    <link>http://www.matthewajackson.com/</link>
    <description>Recent content on Matthew Jackson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Sep 2015 20:33:00 +0100</lastBuildDate>
    <atom:link href="http://www.matthewajackson.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Giving Constructive Feedback to Creatives</title>
      <link>http://www.matthewajackson.com/post/giving-constructive-feedback-to-designers/</link>
      <pubDate>Sat, 26 Sep 2015 20:33:00 +0100</pubDate>
      
      <guid>http://www.matthewajackson.com/post/giving-constructive-feedback-to-designers/</guid>
      <description>&lt;p&gt;
When giving feedback on a piece of creative work we have to remember how exposed the designer&#39;s personal style is. Few people see, let alone have an opinion on, a software developer&#39;s code style, or a QA&#39;s regression test procedure, but visual design is incredibly visible and many people have opinions about it. To avoid getting the designer on the defensive you have to give feedback which is fundamentally specific, constructive and objective.
&lt;/p&gt;
&lt;p&gt;
Here are some top tips to keep your relationship cordial and productive:
&lt;/p&gt;

&lt;p&gt;&lt;ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;&lt;h3&gt; Clarify the goals of the work first&lt;/h3&gt;
&lt;p&gt;
Are you and the designer both expecting the same results from the project? Make it clear from the outset that you expected a prototype, or that they are aware of the project timeline if they haven&amp;rsquo;t delivered as much as you hoped for.
&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;&lt;h3&gt;Talk about what you felt, not what you think the user will feel&lt;/h3&gt;
&lt;p&gt;
The best feedback is a diary of emotions and thoughts while reviewing the design. Nobody can argue that your feelings are wrong, but they can (and will) argue passionately for their own ideal use cases. By expressing what you and saw and did, you will have a much more constructive conversation.
&lt;/p&gt;
&lt;p&gt;
An important part of reporting your feedback and avoiding that defensive conflict is to use the past tense. For example, &amp;ldquo;it wasn&amp;rsquo;t obvious how to continue the signup process&amp;rdquo; vs &amp;ldquo;this doesn&amp;rsquo;t make it clear how to continue the signup process&amp;rdquo;. The first option is irrefutable as an observation, the second will like an attack on design skills and elicit conflict.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3&gt;Constructive questioning&lt;/h3&gt;
&lt;p&gt;
Don&amp;rsquo;t be aggressive or challenging with your questions. Instead of making the designer defend their thought processes, seek to understand them by asking for opinions; this will lead to healthy discussion rather than unhealthy conflict.
&lt;/p&gt;&lt;p&gt;
Here&amp;rsquo;s an example:&lt;br&gt;
&amp;ldquo;Why would the customer look there for that?&amp;rdquo; vs &amp;ldquo;how do you think the user would know to look there for that?&amp;rdquo;
&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;&lt;h3&gt;Be specific and objective&lt;/h3&gt;
    &lt;p&gt;
&amp;ldquo;This text is weirdly squished together&amp;rdquo; vs &amp;ldquo;I&amp;rsquo;m used to seeing text with more space between the lines, this design is different and I found it difficult to read&amp;rdquo;
&lt;/p&gt;
&lt;p&gt;
Again, this one is about avoiding engaging the designer&amp;rsquo;s self-defense mechanisms. Explain how you felt using objective words which are not emotive and are not open to interpretation.
&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;&lt;h3&gt;Soften up criticism if necessary, especially over email&lt;/h3&gt;
    &lt;p&gt;
Without body language or tone of voice, jests can be taken seriously. Be sure to convert cues of humour into words (emoji, laughter etc) or reduce the drama of what you&amp;rsquo;re saying when writing by email.
&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;&lt;h3&gt;Take your time&lt;/h3&gt;
    &lt;p&gt;
Take time to assess your gut reactions to a design, and formulate it into constructive feedback. Try looking at it at a quieter time of day or in a setting where it would be used.
&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In search of the perfect product management process</title>
      <link>http://www.matthewajackson.com/post/product-management-process-for-startups/</link>
      <pubDate>Sun, 05 Jul 2015 20:37:09 +0100</pubDate>
      
      <guid>http://www.matthewajackson.com/post/product-management-process-for-startups/</guid>
      <description>&lt;p&gt;Startups often look at processes as corporate, stodgy and antagonistic to creativity. The truth is that processes are a framework for success. What&amp;rsquo;s needed are processes which provide flexibility, facilitate rapid learning and iteration, and act as a solid foundation for innovation. While achieving perfection is no mean feat, here are some ideas that should be kept in mind when considering product management processes:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt; &lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Build Measure Learn&lt;/span&gt; - this is core to the Lean product philosophy. We are scientists looking to conduct business experiments, and every feature that gets built should be based on a testable hypothesis that solves a customer problem or moves us towards our business goals. This hypothesis should be quantitative if possible but the key is that we can track if we have been successful. I discuss how we should set SMART goals in &lt;a href=&#34;&#34; style=&#34;text-style:italic;&#34;&gt;another post&lt;/a&gt;, and what&#39;s true of goals is true of the features we choose to complete them. &lt;/p&gt;
    &lt;p&gt;Some online recommend a validated learning step for every feature as part of the product development workflow to ensure that this is remembered - shipping a feature is just the start! &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Sustain momentum&lt;/span&gt; - momentum is very important in product development for the efficiency and morale of the team, we need to &#39;always be shipping&#39;. Continuous deployment is one way of approaching this - and it means we have very frequent software releases, which also minimises the complications from integration testing lots of features together. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Think about quick wins&lt;/span&gt; - when you prioritise features/work, you should be looking to maximise return for the amount of resource investment. Think about calculating a metric of business impact for each piece of work based on your current business goal&#39;s KPIs and divide this by a metric of the developer time required (e.g. in weeks). This is as close as we can get to an objective idea of project priority - at least the best thing the Internet is able to suggest to me :)
    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Less is more&lt;/span&gt; - a trap that is easy to fall into is trying to get too many projects in progress in an attempt to appease the gods. Unfortunately, this can quickly become unworkable and disappoints stakeholders as they have expectations raised by things being in progress, but with so much in progress everything takes longer. &lt;/p&gt;&lt;p&gt;Aim to have at most 2 major projects in progress at any one time and get them through as fast as possible - you want to be a laser, pinpointing and solving particular problems rapidly.
    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Strict resource management&lt;/span&gt; - related to &#39;Less is More&#39;, we need to plan a roadmap which has very realistic resource planning, when you estimate how long a feature will take, at least double this time when you put it on the roadmap, and don&#39;t put more work on the board than you will have developers for, it&#39;s not reasonable to expect them to be switching in between.
    &lt;/p&gt;
    &lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;80/20 rule&lt;/span&gt; - the vast majority of the development time should be spent measuring and improving existing features and not chasing after shiny new features. A validated learning step/steps in the product development pipeline can help to enforce this.
    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Customer focus&lt;/span&gt; - good leadership is all about having a vision and using your passion to engage people with that vision. But as a product manager, you have to be passionate about building what customers want, and should be an advocate for features which are strongly customer-requested and for an excellent customer experience. &lt;/p&gt;&lt;p&gt;Do bear in mind that customers are often better at describing their problem than having a vision, so look for the problems and then use your talented team to craft a creative and intuitive solution.
    &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Reduce silos&lt;/span&gt; - a successful team needs lots of effective communication. The product manager cannot be the sole communication conduit between developers and the rest of the business. &lt;/p&gt;&lt;p&gt;Developers need to be actively talking to stakeholders and UX (and PMs!) as appropriate during their work - part of this is about making sure people feel comfortable asking questions and not knowing the answer all the time in the company culture.&lt;/p&gt;&lt;p&gt; On top of this, the developers need to be involved in planning meetings for features (ideation, discussion of technical challenges and scope to some degree) to feel part of a team. It&#39;s the difference between a stonemason telling you they&#39;re &#39;cutting stones&#39; and them saying they&#39;re &#39;building a cathedral&#39;.
&lt;/p&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;blog-li-title&#34;&gt;Don&#39;t copy the competition&lt;/span&gt; - Competitor benchmarking is fine where we&#39;re short on time and are stuck on a particular user experience question, or possibly to see the &#39;table stakes&#39; for common functionality but we should avoid copying competitor site features directly as a product strategy. &lt;/p&gt;&lt;p&gt;If a company wants to differentiate themselves and take their business to the next level, then they need to think differently to the competition and do things that nobody else is doing and solve the most important problems for the customer.&lt;/p&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>User Experience Essentials for Product Management</title>
      <link>http://www.matthewajackson.com/post/user-experience-for-product-managers/</link>
      <pubDate>Sun, 31 May 2015 20:37:09 +0100</pubDate>
      
      <guid>http://www.matthewajackson.com/post/user-experience-for-product-managers/</guid>
      <description>&lt;p&gt;
As a product manager, you will undoubtedly have to critique designs and wireframes made by UX/Visual Design colleagues from a customer or technical perspective and may even find yourself required to design aspects of user interfaces. In doing so it helps to know the main principles involved in crafting a great user experience.
&lt;p&gt;
    &lt;p&gt;
        User experience can be broken down into two main parts. The &lt;strong&gt;structure&lt;/strong&gt; describes how pages on the site are organised into a structure, what information is on each page and how it is organised on the page. The &lt;strong&gt;surface&lt;/strong&gt; level describes how visual language of colour, imagery and formatting can be used to optimise the communication of the content to the user.
    &lt;/p&gt;

&lt;h3&gt;Structural features&lt;/h3&gt;

&lt;p&gt;
Structure is created by an interplay of &lt;strong&gt;interaction design&lt;/strong&gt;, what information is displayed to the user on each page and what happens when the user interacts with the content, and &lt;strong&gt;information architecture&lt;/strong&gt;, which is how the information on the site is organised at a higher level (types of pages and how they are grouped and navigation, including search). 
&lt;p&gt;
    &lt;p&gt;
It&#39;s very important that you have a consistent user experience, this includes the tone of the copy as well as the specific wording and labels used for features. Re-usable design patterns should be established for the site, for example for message boxes and login fields. This means that customers only have to learn how the site works once and reduces frustration.
&lt;/p&gt;
&lt;p&gt;
Users of your site should also understand where they are at any time on the site, how they got there and where they can go from this point - otherwise it&#39;s like being trapped in a hall of mirrors. On a related note any interactions you have with the site should produce immediate responses that can be understood by humans - so no scary &#39;Fatal exceptions&#39;!
    &lt;/p&gt;
    &lt;p&gt;
Good interfaces don&#39;t put too much on the screen at once, rather use progressive disclosure of the information which makes the user experience more focussed and engaging and less confusing. In scientific terms we are maximising signal and reducing noise.
&lt;/p&gt;&lt;p&gt;
If you have a bad interface the product will NOT be used and you should only deviate from established convention if there is a valid reason.
&lt;/p&gt;
&lt;h3&gt; Surface features - visual language&lt;/h3&gt;
&lt;p&gt;
The surface is about using layout, typography, colour, imagery, sequencing and visual identity to organise, economise and communicate the information on a page in the best way to the user.
&lt;/p&gt;&lt;p&gt;
Colour draws the eye to the most important areas on the screen and influences our emotional response. Choosing the right colours maximises readability and minimises optical fatigue. Don&#39;t use too saturated colours even if they are complementary. Use contrast to draw attention to specific elements with an awareness that the greatest contrast areas draw the most attention first. Black, white and red have the maximum contrast of any combination.
&lt;/p&gt;&lt;p&gt;
If you use more than one style of font, they should be visually distinct from each other and used to denote different types of information. Areas of copy should be aligned with each other and with other elements on the page, and be in close proximity to anything they refer to.
&lt;/p&gt;
&lt;p&gt;
So there is a lot to consider when designing user interfaces, and it is a lot more than simply drawing boxes. It requires an excellent command of human psychology and it is what can make or break your product, so you have to get it right.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adaptive Planning in Software Product Development</title>
      <link>http://www.matthewajackson.com/post/adaptive-planning-in-software-product-development/</link>
      <pubDate>Tue, 26 May 2015 20:37:09 +0100</pubDate>
      
      <guid>http://www.matthewajackson.com/post/adaptive-planning-in-software-product-development/</guid>
      <description>&lt;p&gt;Adaptive planning is a strategic philosophy which aims to ensure you&amp;rsquo;re delivering the best value in an ever-changing and unpredictable business environment. The planning phase of large projects is often discrete and comes at the start of the process. This can be a recipe for disaster if our ideas do not have the desired impact (wrong assumptions) or if during the time from conception to completion the world changes so that what you deliver is no longer important or useful.&lt;/p&gt;

&lt;p&gt;The adaptive approach turns strategy from guesswork to science, and consists of three key principles to keep it nimble and validate our assumptions about what will help us achieve our business goals.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Variation&lt;/h3&gt;
&lt;p&gt;
This means that for each of your business objectives you should generate a large number of possible initiatives to achieve it. Let your creativity run wild and aim to look at the problem from different angles that you haven&amp;rsquo;t considered previously. For example, if you want to increase conversion rates on your e-commerce website, then you should consider what the marketing team could do as well as the product development team.
&lt;/p&gt;
&lt;p&gt;
After the creative thinking, you need to be logical - assess the magnitude of the potential business impact and the resource requirements for each of the initiatives and prioritise them. There will likely be some low-hanging fruit and these are the things you want to tick off first.
    &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Survivability&lt;/h3&gt;
&lt;p&gt;Once you know what your best initiatives are, you need to test out if your assumptions about their business impact are correct. If it is a software development feature then you need to get prototypes built and get feedback from user testing to iterate on the design until you are happy with it.&lt;/p&gt;
&lt;p&gt;
User story mapping (see another post) can then be carried out to find the best way to break the feature down into releases which should each be polished slices of business value (i.e not just functional, they should look good as well). By breaking the project down into releases, you can get early feedback from customers on the desired functionality and usefulness of the feature.
    &lt;/p&gt;
&lt;h3&gt;
Selection
&lt;/h3&gt;
&lt;p&gt;
Each release should contain ways to track the usage of the feature and customers&amp;rsquo; opinions, is there interest in it? Are people using it how we expect? What changes do they want? With the answers to such questions we can quickly feedback into our strategy. We can make an early decision to drop a feature and not waste precious development resources on it, or to amend future releases to include more highly-demanded additional functionality faster. Essentially we want to learn from our mistakes and improve and build upon our successes. &lt;/p&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Adaptive planning is also known as the &amp;ldquo;Build, Measure, Learn&amp;rdquo; methodology, but as an ex-geneticist I love the evolutionary analogue. As product managers we are trying to &amp;lsquo;evolve&amp;rsquo; a product to be as efficient and successful as possible, just as nature facilitates the evolution of organisms. For example, reproduction produces a huge array genetic diversity (from mutations as well as recombination), these are the &amp;lsquo;creative ideas&amp;rsquo; of our model. Between each biological generation these are small changes from the previous generation, any larger genetic changes are generally not survivable. Finally, natural selection occurs, and the most successful genetic variants are more likely to be passed on to the next generation, product managers need to be the selective agent in product evolution, using KPIs as indicators of success.&lt;/p&gt;

&lt;p&gt;So there you have it, be nice to product managers, they&amp;rsquo;re basically gods ;)&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Business Goals and Monitoring Performance</title>
      <link>http://www.matthewajackson.com/post/setting-goals-monitoring-performance/</link>
      <pubDate>Mon, 25 May 2015 20:33:00 +0100</pubDate>
      
      <guid>http://www.matthewajackson.com/post/setting-goals-monitoring-performance/</guid>
      <description>&lt;p&gt;A sports coach knows they are doing their job well when their team wins matches, it&#39;s obvious! For a product manager signs of success are less apparent - you must have some measurable indicators of performance for your goal. A goal could be increasing conversion rate on an online shop and the metric would be the e-commerce conversion rate from Google Analytics, if you see this consistently rising then you know you are succeeding.

&lt;h3&gt; Setting Measurements &lt;/h3&gt;

After deciding the business goals, we need to define key measurements, these provide a structure for how the goal needs to be fulfilled.
&lt;ol&gt;
    &lt;li&gt;Scale - What will we measure?&lt;/li&gt;
    &lt;li&gt;Meter - How will we measure it?&lt;/li&gt;
    &lt;li&gt;Benchmark - How are things now?&lt;/li&gt;
    &lt;li&gt;Constraint - What is the minimum acceptable value/break-even point? There may not always be a constraint. &lt;/li&gt;
    &lt;li&gt;Target - What is the desired value?&lt;/li&gt;
&lt;/ol&gt;
Here is an e-commerce example:&lt;br/&gt;
&lt;br/&gt;
Goal: Increase Average Order Value within next 3 months&lt;br/&gt;
&lt;ul&gt;
    &lt;li&gt;Scale - AOV&lt;/li&gt;
    &lt;li&gt;Meter - Google Analytics AOV&lt;/li&gt;
    &lt;li&gt;Benchmark - this month - £26.50&lt;/li&gt;
    &lt;li&gt;Constraint - £28.50 (to cover fulfilment costs)&lt;/li&gt;
    &lt;li&gt;Target - £30 (we&#39;re in da money :)!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Setting Milestones&lt;/h3&gt;
&lt;p&gt;
You need to prioritise the goals (for example via dot voting with your team) before coming up with milestones for the roadmap. Milestones are markers along the way to completing our business goals. The best advice is to focus on one goal at a time when delivering iteratively, broken down into milestones if necessary. 
&lt;/p&gt;&lt;p&gt;5 milestones where each one fulfils one goal fully are better than 5 where each completes 5 goals partially, this is owing to the uncertainty of the business environment - by the time you get to milestone 4, it is very likely that the business objectives will change and you won&#39;t have actually completed any of the goals and you don&#39;t care about some of them now.
&lt;/p&gt;

&lt;p&gt;E.g.
&lt;ul&gt;
    &lt;li&gt;Milestone 1 - more players, no negative impact on retention, 100% increase in IT costs possible if necessary&lt;/li&gt;
    &lt;li&gt;Milestone 2 - no damage to player numbers or retention, reduce IT costs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes risk will be too high to fulfil one ambitious goal at a time. In these cases, you should break down the goals into smaller milestones and alternate between different goals&amp;rsquo; milestones. For example if your goal was to increase game player numbers by 700k while not increasing IT costs, it may be better to increase player numbers by 100k (not 700k) first, and then switch to reducing IT costs, and then return to increasing player numbers by another 100k.
&lt;/p&gt;
&lt;p&gt;
So there you have it - measurable goals, scheduled into achieveable milestones with a balanced risk profile. It&amp;rsquo;s all so easy!
    &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>http://www.matthewajackson.com/blog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.matthewajackson.com/blog/</guid>
      <description>&lt;p&gt;Hello blog front page&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>